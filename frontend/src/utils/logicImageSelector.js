/**
 * Analyse le texte d'un message et d√©termine l'image de Saul la plus appropri√©e.
 * Retourne le chemin de l'image correspondant au contexte du message.
 * 
 * @param {string} text - Le texte du message √† analyser
 * @returns {string} - Le chemin de l'image correspondante
 */
export const selectSaulImage = (text) => {
  // Convertir le texte en minuscules pour une comparaison insensible √† la casse
  const lowerText = text.toLowerCase();
  
  // Mots-cl√©s pour Saul souriant (nouveaut√©s, bonnes nouvelles)
  const happyKeywords = ['nouveau', 'nouveaut√©', 'ajout√©', 'fonctionnalit√©', 'am√©lior√©', 'bienvenue', 'f√©licitations', 'üéâ'];
  
  // Mots-cl√©s pour Saul pensif (changements, mises √† jour)
  const pensiveKeywords = ['mise √† jour', 'changement', 'modification', 'important', 'attention', 'pensez √†', 'savais-tu'];
  
  // Mots-cl√©s pour Saul motiv√© (appels √† l'action)
  const motivatedKeywords = ['d√©couvre', 'essaye', 'lance-toi', 'teste', 'explore', '√† toi de jouer', 'c\'est √† toi', 'üöÄ'];
  
  // Image par d√©faut (Saul ok)
  let imagePath = 'https://lexforge.vercel.app/assets/images/saul/saul_ok.jpg';
  
  // V√©rifier si le texte contient des mots-cl√©s pour Saul souriant
  if (happyKeywords.some(keyword => lowerText.includes(keyword))) {
    imagePath = 'https://lexforge.vercel.app/assets/images/saul/saul_sourire.jpg';
  }
  // V√©rifier si le texte contient des mots-cl√©s pour Saul pensif
  else if (pensiveKeywords.some(keyword => lowerText.includes(keyword))) {
    imagePath = 'https://lexforge.vercel.app/assets/images/saul/saul_pensif.jpg';
  }
  // V√©rifier si le texte contient des mots-cl√©s pour Saul motiv√©
  else if (motivatedKeywords.some(keyword => lowerText.includes(keyword))) {
    imagePath = 'https://lexforge.vercel.app/assets/images/saul/saul_motive.jpg';
  }
  
  return imagePath;
};

/**
 * Traite un message et retourne le chemin de l'image appropri√©.
 * Si 'image' est 'auto', l'image est d√©termin√©e en fonction du contenu du texte.
 * Sinon, utilise l'image sp√©cifi√©e dans le message.
 * 
 * @param {Object} message - Le message √† traiter
 * @returns {string} - Le chemin de l'image √† afficher
 */
export const getMessageImage = (message) => {
  if (!message) return 'https://lexforge.vercel.app/assets/images/saul/saul_ok.jpg';
  
  // Si une image sp√©cifique est d√©finie (autre que 'auto'), l'utiliser
  if (message.image && message.image !== 'auto') {
    // Si l'image commence d√©j√† par http, on la retourne telle quelle
    if (message.image.startsWith('http')) {
      return message.image;
    }
    // Sinon, on construit l'URL compl√®te
    return `https://lexforge.vercel.app${message.image}`;
  }
  
  // Sinon, s√©lectionner l'image en fonction du texte
  return selectSaulImage(message.text);
};

export default { selectSaulImage, getMessageImage }; 